
	private BoardNode generateABTree(BoardNode root)
	{
		Stack abStack = new Stack();
		BoardNode node = root;
		int futureTurn = localTurn;
		int pieceIndex, moveIndex;
		Vector feasible;
		Board tmpBoard;
		
		
		while(true)
		{
			if(futureTurn % 2 == 0)
			{
				for(pieceIndex = 0; pieceIndex < node.board.whitePieces.size(); pieceIndex++)
				{
					feasible = action.getFeasibleMoves(node.board, (Point)node.board.whitePieces.elementAt(pieceIndex));
					
					for(moveIndex = 0; moveIndex < feasible.size(); moveIndex++)
					{
						tmpBoard = action.move(node.board, (Point) node.board.whitePieces.elementAt(pieceIndex), (Point) feasible.elementAt(moveIndex));	
						node.children.add(tmpBoard);
						abStack.push(tmpBoard);
						
					}
				}
			}
		}
		/*TODO: Implement AB with check for turn at creation of each
		 *node to reduce calculation when player chose another move*/
		 return node;
	}